(()=>{"use strict";var __webpack_modules__={561:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.VSHAuto=void 0;const vscode=__webpack_require__(496),fileUtil_1=__webpack_require__(963);__webpack_require__(659);const TerminalUtil_1=__webpack_require__(659),EditorUtil_1=__webpack_require__(673),defaultTemplates_1=__webpack_require__(499);var TerminalUtil=TerminalUtil_1.default,EditorUtil=EditorUtil_1.default;class VSHAuto{static showCommandsInPickUp(e){const t=e.extensionPath.replace(/\\/g,"/")+"/scripts";VSHAuto.createScriptFolderIfNotExists(t),fileUtil_1.FileUtil.createFolderIfNotExists(t);let n=fileUtil_1.FileUtil.getDirectoryFilesList(t),i=fileUtil_1.FileUtil.removeExtension(t);vscode.window.showQuickPick(i).then((t=>{let o=i.indexOf(""+t);VSHAuto.executeScriptByName(e,n[o])}))}static executeScriptByName(context,scriptName){const SCRIPT_PATH=context.extensionPath.replace(/\\/g,"/")+"/scripts";let selectedFilePath=`${SCRIPT_PATH}/${scriptName}`,fileContent=__webpack_require__(147).readFileSync(selectedFilePath).toString();eval(fileContent)}static showCommandsToEditInPickUp(e){const t=e.extensionPath.replace(/\\/g,"/")+"/scripts";VSHAuto.createScriptFolderIfNotExists(t),fileUtil_1.FileUtil.createFolderIfNotExists(t);let n=fileUtil_1.FileUtil.getDirectoryFilesList(t),i=fileUtil_1.FileUtil.removeExtension(t);i=["Create new Script..."].concat(i),vscode.window.showQuickPick(i).then((async e=>{let o=i.indexOf(""+e);if(0==o){let e=await vscode.window.showInputBox({title:"New script file name"});e=e.toLowerCase().endsWith(".js")?e:e+".js";let n=`${t}/${e}`;__webpack_require__(147).writeFileSync(n,"const vscode = require('vscode');\n\n",{encoding:"utf8"}),EditorUtil.openFile(n)}else{let e=`${t}/${n[o-1]}`;EditorUtil.openFile(e)}}))}static listAllScriptsInfo(e){let t=[];const n=e.extensionPath.replace(/\\/g,"/")+"/scripts";VSHAuto.createScriptFolderIfNotExists(n),fileUtil_1.FileUtil.createFolderIfNotExists(n);let i=fileUtil_1.FileUtil.getDirectoryFilesList(n);for(let e=0;e<i.length;e++){const o=`${n}/${i[e]}`,s=__webpack_require__(147).readFileSync(o).toString(),r=i[e],c=VSHAuto.extractCommandName(s);t.push({commandName:c,scriptName:r})}return t}static extractCommandName(e){const t=/\/\/( )*?command( )*?:( )*?/;if(0==e.split("\n").length)return null;let n=e.split("\n")[0];return t.test(n)?n.replace(t,"").replace(/ /g,""):null}static createScriptFolderIfNotExists(e){const t=__webpack_require__(147);if(!t.existsSync(e)){t.mkdirSync(e);let n=defaultTemplates_1.default.get();for(let i=0;i<n.length;i++){const o=n[i],s=`${e}/${o.fileName}`;t.writeFileSync(s,o.template,{encoding:"utf8"})}}}}exports.VSHAuto=VSHAuto},499:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{static get(){return[{fileName:"01 - open scritps in vscode project.js",template:"// command: vshauto.open_scripts_new_instance\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nTerminalUtil.executeCommandInTerminal(`code '${SCRIPT_PATH}'`);"},{fileName:"02 - open scripts in this vscode instance.js",template:"// command: vshauto.open_scripts\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nlet workspaceFolders = vscode.workspace.workspaceFolders;\n\nvscode.workspace.updateWorkspaceFolders(workspaceFolders ? workspaceFolders.length : 0,\n    null,\n    {\n        uri: vscode.Uri.file(SCRIPT_PATH),\n        name: require('path').basename(SCRIPT_PATH)\n    });\n"},{fileName:"03 - edit file.js",template:"// command: vshauto.edit_file\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nlet fileContent = EditorUtil.getSelectedFileContent();\n\nlet changedFileContent = `this file content was changed the original content is >>>\n ${fileContent} \n>>> end of original content`;\n\nEditorUtil.setSelectedFileContent(changedFileContent);"},{fileName:"04 - insert text at cursor position.js",template:"// command: vshauto.insert_text_at_cursor\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nEditorUtil.insertText(\"<INSERTED AT CURSOR>\");"},{fileName:"05 - edit selected text.js",template:"// command: vshauto.edit_selected_text\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nEditorUtil.insertInSelection(\"CHANGED\");"},{fileName:"06 - save current file.js",template:"// command: vshauto.save_current_file\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nvscode.commands.executeCommand('workbench.action.files.save');"},{fileName:"07 - messagebox example.js",template:"// command: vshauto.messagebox_example\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nvscode.window.showInformationMessage('HELLO!!!');"},{fileName:"08 - webview example.js",template:"// command: vshauto.webview_example\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nconst panel = vscode.window.createWebviewPanel(\n    'indentifierID', \n    'Window Title',\n    vscode.ViewColumn.One,\n    {}\n);\n\npanel.webview.html = `\n    <html>\n\n    <head>\n    </head>\n\n    <body>\n       <h1>My WebView</h1>\n    </body>\n\n    </html>\n`;"},{fileName:"09 - execute command in terminal.js",template:"// command: vshauto.execute_in_terminal\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nTerminalUtil.executeCommandInTerminal(\"ls\");"},{fileName:"10 - get paths.js",template:"// command: vshauto.get_paths\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nlet filePath = EditorUtil.getSelectedFileName();\nlet fileFolderPath = EditorUtil.getSelectedFileFolder();\nlet workspacePath = vscode.workspace.workspaceFolders.length > 0 ? vscode.workspace.workspaceFolders[0].uri.fsPath : '';\n\nTerminalUtil.executeCommandInTerminal(`echo 'selected file: ${filePath}'`);\nTerminalUtil.executeCommandInTerminal(`echo 'selected file folder: ${fileFolderPath}'`);\nTerminalUtil.executeCommandInTerminal(`echo 'workspace folder: ${workspacePath}'`);"}]}}},673:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(496),o=n(496);class s{static openFile(e){var t=o.Uri.parse("file:///"+e);o.workspace.openTextDocument(t).then((e=>{o.window.showTextDocument(e)}))}static getSelectedFileFolder(){let e=s.getSelectedFileName();return null==e?null:n(17).dirname(e)}static getSelectedFileName(){return null==o.window.activeTextEditor?null:o.window.activeTextEditor.document.fileName}static getSelectedFileContent(){return null==o.window.activeTextEditor?"":o.window.activeTextEditor.document.getText()}static setSelectedFileContent(e){null!=o.window.activeTextEditor&&o.window.activeTextEditor.edit((t=>{t.delete(new i.Range(new i.Position(0,0),new i.Position(o.window.activeTextEditor.document.lineCount-1,s.getSelectedFileContent().length))),t.insert(new o.Position(0,0),e)}))}static insertText(e){null!=o.window.activeTextEditor&&o.window.activeTextEditor.edit((t=>{t.insert(o.window.activeTextEditor.selection.end,e)}))}static insertInSelection(e){null!=o.window.activeTextEditor&&o.window.activeTextEditor.edit((t=>{let n=o.window.activeTextEditor.selection.end;t.delete(o.window.activeTextEditor.selection),t.insert(n,e)}))}}t.default=s},659:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(496);class o{static executeCommandInTerminal(e){o.getActiveOrOpenNewTerminal().then((t=>{t.sendText(e)}))}static getActiveOrOpenNewTerminal(){return new Promise(((e,t)=>{i.window.activeTerminal&&e(i.window.activeTerminal),i.commands.executeCommand("workbench.action.terminal.toggleTerminal").then((()=>{var n=100,o=setInterval((function(){i.window.activeTerminal?e(i.window.activeTerminal):--n<1&&(clearInterval(o),t())}),100)}),(()=>{t()}))}))}}t.default=o},963:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FileUtil=void 0,t.FileUtil=class{static createFolderIfNotExists(e){const t=n(147);t.existsSync(e)||t.mkdirSync(e,{recursive:!0})}static getDirectoryFilesList(e){const t=n(147);return n(17),t.readdirSync(e)}static removeExtension(e){const t=n(147),i=n(17);let o=t.readdirSync(e);for(let e=0;e<o.length;e++)o[e]=i.parse(o[e]).name;return o}}},496:e=>{e.exports=require("vscode")},147:e=>{e.exports=require("fs")},17:e=>{e.exports=require("path")}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}var __webpack_exports__={};(()=>{var e=__webpack_exports__;Object.defineProperty(e,"__esModule",{value:!0}),e.deactivate=e.activate=void 0;const t=__webpack_require__(496),n=__webpack_require__(561);e.activate=function(e){let i=t.commands.registerCommand("vshauto.showCommands",(()=>{n.VSHAuto.showCommandsInPickUp(e)})),o=t.commands.registerCommand("vshauto.editCommands",(()=>{n.VSHAuto.showCommandsToEditInPickUp(e)}));e.subscriptions.push(i),e.subscriptions.push(o),function(e){let i=n.VSHAuto.listAllScriptsInfo(e);for(let o=0;o<i.length;o++)if(i[o].commandName){let s=t.commands.registerCommand(i[o].commandName,(()=>n.VSHAuto.executeScriptByName(e,i[o].scriptName)));e.subscriptions.push(s)}}(e)},e.deactivate=function(){}})(),module.exports=__webpack_exports__})();