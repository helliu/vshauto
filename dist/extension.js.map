{"version":3,"file":"extension.js","mappings":"sLAAA,sCACA,oCACA,yBACA,8CACA,sCACA,4CAIA,IAAIA,aAAe,uBACfC,WAAa,qBAEjB,MAAaC,QAGTC,4BAA4BC,SACxB,MAAMC,YAAcD,QAAQE,cAAcC,QAAQ,MAAO,KAAO,WAEhEL,QAAQM,8BAA8BH,aAEtC,WAAAI,SAASC,wBAAwBL,aAEjC,IAAIM,YAAwB,WAAAF,SAASG,sBAAsBP,aACvDQ,qBAAiC,WAAAJ,SAASK,gBAAgBT,aAE9DU,OAAOC,OAAOC,cAAcJ,sBAAsBK,MAAKC,YACnD,IAAIC,cAAuBP,qBAAqBQ,QAAQ,GAAKF,WAEzDG,iBAA0B,GAAGjB,eAAeM,YAAYS,iBAExDG,YAAqB,sCAA2BD,kBAAkBE,WAEtEC,KAAKF,gBAIbpB,kCAAkCC,GAC9B,MAAMC,EAAcD,EAAQE,cAAcC,QAAQ,MAAO,KAAO,WAEhEL,QAAQM,8BAA8BH,GAEtC,WAAAI,SAASC,wBAAwBL,GAEjC,IAAIM,EAAwB,WAAAF,SAASG,sBAAsBP,GACvDQ,EAAiC,WAAAJ,SAASK,gBAAgBT,GAE9DQ,EAAuB,CAAC,wBAAwBa,OAAOb,GAEvDE,OAAOC,OAAOC,cAAcJ,GAAsBK,MAAKS,MAAMR,IACzD,IAAIC,EAAuBP,EAAqBQ,QAAQ,GAAKF,GAE7D,GAAoB,GAAjBC,EAAmB,CAClB,IAAIQ,QAA0Bb,OAAOC,OAAOa,aAAa,CAACC,MAAO,yBAEjEF,EAAoBA,EAAkBG,cAAcC,SAAS,OAASJ,EAAoBA,EAAoB,MAE9G,IAAIK,EAAoB,GAAG5B,KAAeuB,IAE1C,uCAA4BK,EAAmB,wCAAyC,CAACC,SAAU,SACnGjC,WAAWkC,SAASF,OACnB,CACD,IAAIX,EAA0B,GAAGjB,KAAeM,EAAYS,EAAc,KAC1EnB,WAAWkC,SAASb,OAKhCnB,qCAAqCiC,GACjC,MAAMC,EAAK,oBAAQ,KAEnB,IAAIA,EAAGC,WAAWF,GAAY,CAC1BC,EAAGE,UAAUH,GAEb,IAAII,EAAa,2BAAiBC,MAElC,IAAI,IAAIC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IAAI,CACrC,MAAME,EAAWJ,EAAUE,GACrBG,EAAe,GAAGT,KAAcQ,EAASE,WAE/CT,EAAGU,cAAcF,EAAcD,EAASA,SAAU,CAACV,SAAU,YAnE7E,yB,6DCXA,gBAEI/B,aACI,MAAO,CACP,CAAC2C,SAAU,yCAA0CF,SAAS,gHAI9D,CAACE,SAAU,+CAAgDF,SAAS,mYAYpE,CAACE,SAAU,oBAAqBF,SAAS,yUAQzC,CAACE,SAAU,yCAA0CF,SAAS,iGAI9D,CAACE,SAAU,6BAA8BF,SAAS,2FAIlD,CAACE,SAAU,4BAA6BF,SAAS,+GAIjD,CAACE,SAAU,6BAA8BF,SAAS,kGAIlD,CAACE,SAAU,0BAA2BF,SAAS,+cAsB/C,CAACE,SAAU,sCAAuCF,SAAS,+FAI3D,CAACE,SAAU,oBAAqBF,SAAS,ukB,+DCvEjD,eAEM7B,EAAS,EAAQ,KAEvB,MAAqBd,EAEjBE,gBAAgB6C,GACZ,IAAIC,EAAUlC,EAAOmC,IAAIC,MAAM,WAAaH,GAE5CjC,EAAOqC,UAAUC,iBAAiBJ,GAAS/B,MAAMoC,IAC7CvC,EAAOC,OAAOuC,iBAAiBD,MAIvCnD,+BACI,IAAIqD,EAAmBvD,EAAWwD,sBAElC,OAAuB,MAApBD,EACQ,KAEJ,cAAwBA,GAGnCrD,6BACI,OAAqC,MAAlCY,EAAOC,OAAO0C,iBACL,KAEL3C,EAAOC,OAAO0C,iBAAiBC,SAASb,SAGnD3C,gCACI,OAAqC,MAAlCY,EAAOC,OAAO0C,iBACL,GAEL3C,EAAOC,OAAO0C,iBAAiBC,SAASC,UAGnDzD,8BAA8BoB,GACW,MAAlCR,EAAOC,OAAO0C,kBAGjB3C,EAAOC,OAAO0C,iBAAiBG,MAAKC,IAGhCA,EAAEC,OAAO,IAAI,EAAAC,MAAM,IAAI,EAAAC,SAAS,EAAG,GAAI,IAAI,EAAAA,SAASlD,EAAOC,OAAO0C,iBAAiBC,SAASO,UAAU,EAAGjE,EAAWkE,yBAAyBxB,UAC7ImB,EAAEM,OAAO,IAAIrD,EAAOkD,SAHT,EACE,GAE+B1C,MAIpDpB,kBAAkBkE,GACuB,MAAlCtD,EAAOC,OAAO0C,kBAGjB3C,EAAOC,OAAO0C,iBAAiBG,MAAKC,IAChCA,EAAEM,OAAOrD,EAAOC,OAAO0C,iBAAiBvC,UAAUmD,IAAKD,MAI/DlE,yBAAyBkE,GACgB,MAAlCtD,EAAOC,OAAO0C,kBAGjB3C,EAAOC,OAAO0C,iBAAiBG,MAAKC,IAChC,IAAIS,EAAiBxD,EAAOC,OAAO0C,iBAAiBvC,UAAUmD,IAE9DR,EAAEC,OAAOhD,EAAOC,OAAO0C,iBAAiBvC,WACxC2C,EAAEM,OAAOG,EAAgBF,OA9DrC,a,+DCJA,eAEA,MAAqBrE,EAEjBG,gCAAgCqE,GAC5BxE,EAAayE,6BAA6BvD,MAAMwD,IAC5CA,EAASC,SAASH,MAIlBrE,oCACJ,OAAO,IAAIyE,SAAQ,CAACC,EAASC,KACtB/D,EAAOC,OAAO+D,gBACbF,EAAQ9D,EAAOC,OAAO+D,gBAEtBhE,EAAOiE,SAASC,eAAe,4CAA4C/D,MACvE,KACI,IAAIgE,EAAgB,IAEhBC,EAAWC,aAAY,WACpBrE,EAAOC,OAAO+D,eACbF,EAAQ9D,EAAOC,OAAO+D,kBAEjBG,EAAgB,IACjBG,cAAcF,GACdL,OAGT,QAEP,KAAOA,WA5B3B,a,iFCDA,iBAEI3E,+BAA+BmF,GAC3B,MAAMjD,EAAK,EAAQ,KAEdA,EAAGC,WAAWgD,IACfjD,EAAGE,UAAU+C,EAAY,CAAEC,WAAW,IAI9CpF,6BAA6BmF,GACzB,MAAMjD,EAAK,EAAQ,KAKnB,OAJa,EAAQ,IAEAA,EAAGmD,YAAYF,GAKxCnF,uBAAuBmF,GACnB,MAAMjD,EAAK,EAAQ,KACboD,EAAO,EAAQ,IAErB,IAAIC,EAAiBrD,EAAGmD,YAAYF,GAEpC,IAAI,IAAI5C,EAAI,EAAGA,EAAIgD,EAAM/C,OAAQD,IAC7BgD,EAAMhD,GAAK+C,EAAKtC,MAAMuC,EAAMhD,IAAIiD,KAGpC,OAAOD,K,QC9BfE,EAAOC,QAAUC,QAAQ,W,QCAzBF,EAAOC,QAAUC,QAAQ,O,OCAzBF,EAAOC,QAAUC,QAAQ,UCCrBC,yBAA2B,GAG/B,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,yBAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,oBAAoBH,GAAUL,EAAQA,EAAOC,QAASG,qBAG/CJ,EAAOC,Q,2ICrBf,iCACA,2BAEA,oBAAyBzF,GAExB,IAAIiG,EAAetF,EAAOiE,SAASsB,gBAAgB,wBAAwB,KAC1E,EAAApG,QAAQqG,qBAAqBnG,MAG1BoG,EAAezF,EAAOiE,SAASsB,gBAAgB,wBAAwB,KAC1E,EAAApG,QAAQuG,2BAA2BrG,MAGpCA,EAAQsG,cAAcC,KAAKN,GAC3BjG,EAAQsG,cAAcC,KAAKH,IAG5B,2B","sources":["webpack://vshauto/./src/VSHAuto.ts","webpack://vshauto/./src/templates/defaultTemplates.ts","webpack://vshauto/./src/util/EditorUtil.ts","webpack://vshauto/./src/util/TerminalUtil.ts","webpack://vshauto/./src/util/fileUtil.ts","webpack://vshauto/external commonjs \"vscode\"","webpack://vshauto/external node-commonjs \"fs\"","webpack://vshauto/external node-commonjs \"path\"","webpack://vshauto/webpack/bootstrap","webpack://vshauto/./src/extension.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { FileUtil } from './util/fileUtil';\nimport './util/TerminalUtil';\nimport _TerminalUtil from './util/TerminalUtil';\nimport _EditorUtil from './util/EditorUtil';\nimport DefaultTemplates from './templates/defaultTemplates'\n\n\n//make classes availe inside eval\nvar TerminalUtil = _TerminalUtil;\nvar EditorUtil = _EditorUtil;\n\nexport class VSHAuto{\n    \n\n    static showCommandsInPickUp(context: vscode.ExtensionContext){\n        const SCRIPT_PATH = context.extensionPath.replace(/\\\\/g, \"/\") + \"/scripts\";\n\n        VSHAuto.createScriptFolderIfNotExists(SCRIPT_PATH);\n\n        FileUtil.createFolderIfNotExists(SCRIPT_PATH);\n\n        let scriptNames: string[] = FileUtil.getDirectoryFilesList(SCRIPT_PATH);\n        let scriptNameWithoutExt: string[] = FileUtil.removeExtension(SCRIPT_PATH);\n\n        vscode.window.showQuickPick(scriptNameWithoutExt).then(selection => {\n            let selectedIndex:number = scriptNameWithoutExt.indexOf('' + selection);\n \n            let selectedFilePath:string = `${SCRIPT_PATH}/${scriptNames[selectedIndex]}`;\n\n            let fileContent:string = require(\"fs\").readFileSync(selectedFilePath).toString();\n\n            eval(fileContent);\n        });\n    }\n\n    static showCommandsToEditInPickUp(context: vscode.ExtensionContext){\n        const SCRIPT_PATH = context.extensionPath.replace(/\\\\/g, \"/\") + \"/scripts\";\n\n        VSHAuto.createScriptFolderIfNotExists(SCRIPT_PATH);\n\n        FileUtil.createFolderIfNotExists(SCRIPT_PATH);\n\n        let scriptNames: string[] = FileUtil.getDirectoryFilesList(SCRIPT_PATH);\n        let scriptNameWithoutExt: string[] = FileUtil.removeExtension(SCRIPT_PATH);\n\n        scriptNameWithoutExt = [\"Create new Script...\"].concat(scriptNameWithoutExt);\n\n        vscode.window.showQuickPick(scriptNameWithoutExt).then(async selection => {\n            let selectedIndex:number = scriptNameWithoutExt.indexOf('' + selection);\n\n            if(selectedIndex == 0){\n                let newScriptFileName = await vscode.window.showInputBox({title: \"New script file name\"});\n\n                newScriptFileName = newScriptFileName.toLowerCase().endsWith(\".ts\") ? newScriptFileName : newScriptFileName + \".ts\";\n                \n                let newScriptFilePath = `${SCRIPT_PATH}/${newScriptFileName}`;\n\n                require(\"fs\").writeFileSync(newScriptFilePath, \"const vscode = require('vscode');\\n\\n\", {encoding: \"utf8\"});\n                EditorUtil.openFile(newScriptFilePath);\n            }else{\n                let selectedFilePath:string = `${SCRIPT_PATH}/${scriptNames[selectedIndex-1]}`;\n                EditorUtil.openFile(selectedFilePath);\n            }\n        });\n    }\n\n    static createScriptFolderIfNotExists(scriptPath: string) {\n        const fs = require(\"fs\");\n        \n        if(!fs.existsSync(scriptPath)){\n            fs.mkdirSync(scriptPath);\n\n            let templates =  DefaultTemplates.get();\n\n            for(let i = 0; i < templates.length; i++){\n                const template = templates[i];\n                const templatePath = `${scriptPath}/${template.fileName}`;\n\n                fs.writeFileSync(templatePath, template.template, {encoding: \"utf8\"});\n            }\n        }\n    }\n}","\nexport default class DefaultTemplates{\n\n    static get(){\n        return [\n        {fileName: '01 - open scritps in vscode project.js', template:`const vscode = require('vscode');\n\n        TerminalUtil.executeCommandInTerminal(\\`code '\\${SCRIPT_PATH}'\\`);`},\n    \n        {fileName: '02 - open scripts in this vscode instance.js', template:`const vscode = require('vscode');\n\n        let workspaceFolders = vscode.workspace.workspaceFolders;\n        \n        vscode.workspace.updateWorkspaceFolders(workspaceFolders ? workspaceFolders.length : 0,\n            null,\n            {\n                uri: vscode.Uri.file(SCRIPT_PATH),\n                name: require('path').basename(SCRIPT_PATH)\n            });\n        `},\n    \n        {fileName: '03 - edit file.js', template:`const vscode = require('vscode');\n\n        let fileContent = EditorUtil.getSelectedFileContent();\n        \n        let changedFileContent = \\`this file content was changed the original content is >>>\\n \\${fileContent} \\n>>> end of original content\\`;\n        \n        EditorUtil.setSelectedFileContent(changedFileContent);`},\n    \n        {fileName: '04 - insert text at cursor position.js', template:`const vscode = require('vscode');\n\n        EditorUtil.insertText(\"<INSERTED AT CURSOR>\");`},\n    \n        {fileName: '05 - edit selected text.js', template:`const vscode = require('vscode');\n\n        EditorUtil.insertInSelection(\"CHANGED\");`},\n    \n        {fileName: '06 - save current file.js', template:`const vscode = require('vscode');\n\n        vscode.commands.executeCommand('workbench.action.files.save');`},\n    \n        {fileName: '07 - messagebox example.js', template:`const vscode = require('vscode');\n\n        vscode.window.showInformationMessage('HELLO!!!');`},\n    \n        {fileName: '08 - webview example.js', template:`const vscode = require('vscode');\n\n        const panel = vscode.window.createWebviewPanel(\n            'indentifierID', \n            'Window Title',\n            vscode.ViewColumn.One,\n            {}\n        );\n        \n        panel.webview.html = \\`\n            <html>\n        \n            <head>\n            </head>\n        \n            <body>\n               <h1>My WebView</h1>\n            </body>\n        \n            </html>\n        \\`;`},\n    \n        {fileName: '09 - execute command in terminal.js', template:`const vscode = require('vscode');\n\n        TerminalUtil.executeCommandInTerminal(\"ls\");`},\n    \n        {fileName: '10 - get paths.js', template:`const vscode = require('vscode');\n\n        let filePath = EditorUtil.getSelectedFileName();\n        let fileFolderPath = EditorUtil.getSelectedFileFolder();\n        let workspacePath = vscode.workspace.workspaceFolders.length > 0 ? vscode.workspace.workspaceFolders[0].uri.fsPath : '';\n        \n        TerminalUtil.executeCommandInTerminal(\\`echo 'selected file: \\${filePath}'\\`);\n        TerminalUtil.executeCommandInTerminal(\\`echo 'selected file folder: \\${fileFolderPath}'\\`);\n        TerminalUtil.executeCommandInTerminal(\\`echo 'workspace folder: \\${workspacePath}'\\`);`},\n    ];\n    }\n\n}","import { Position, Range } from \"vscode\";\n\nconst vscode = require('vscode');\n\nexport default class EditorUtil{\n\n    static openFile(filePath: string){\n        var fileUri = vscode.Uri.parse(\"file:///\" + filePath);\n\n        vscode.workspace.openTextDocument(fileUri).then((doc: any) => {\n            vscode.window.showTextDocument(doc);\n        });\n    }\n\n    static getSelectedFileFolder(): string|null{\n        let selectedFileName = EditorUtil.getSelectedFileName();\n\n        if(selectedFileName == null)\n            return null;\n\n        return require('path').dirname(selectedFileName);\n    }\n\n    static getSelectedFileName(): string|null{\n        if(vscode.window.activeTextEditor == null)\n             return null;\n\n        return vscode.window.activeTextEditor.document.fileName;\n    }\n\n    static getSelectedFileContent(): string{\n        if(vscode.window.activeTextEditor == null)\n             return \"\";\n\n        return vscode.window.activeTextEditor.document.getText();\n    }\n\n    static setSelectedFileContent(fileContent: string){\n        if(vscode.window.activeTextEditor == null)\n             return;\n\n        vscode.window.activeTextEditor.edit(b => {\n            let line = 0;\n            let column = 0;\n            b.delete(new Range(new Position(0, 0), new Position(vscode.window.activeTextEditor.document.lineCount-1, EditorUtil.getSelectedFileContent().length)));\n            b.insert(new vscode.Position(line, column), fileContent);\n        });\n    }\n\n    static insertText(text: string){\n        if(vscode.window.activeTextEditor == null)\n             return;\n\n        vscode.window.activeTextEditor.edit(b => {            \n            b.insert(vscode.window.activeTextEditor.selection.end, text);\n        });\n    }\n\n    static insertInSelection(text: string){\n        if(vscode.window.activeTextEditor == null)\n             return;\n\n        vscode.window.activeTextEditor.edit(b => { \n            let selectionStart = vscode.window.activeTextEditor.selection.end;\n               \n            b.delete(vscode.window.activeTextEditor.selection);\n            b.insert(selectionStart, text);\n        });\n    }\n}","import * as vscode from 'vscode';\n\nexport default class TerminalUtil{\n\n    static executeCommandInTerminal(command:string){\n        TerminalUtil.getActiveOrOpenNewTerminal().then((terminal) => {\n            terminal.sendText(command);\n        });\n    }\n\n    private static getActiveOrOpenNewTerminal(): Promise<vscode.Terminal>{\n        return new Promise((resolve, reject) => {\n            if(vscode.window.activeTerminal)\n                resolve(vscode.window.activeTerminal);\n                \n                vscode.commands.executeCommand(\"workbench.action.terminal.toggleTerminal\").then(\n                    () => {\n                        var numberOfTries = 100;\n    \n                        var interval = setInterval(function(){\n                            if(vscode.window.activeTerminal)\n                                resolve(vscode.window.activeTerminal);\n                            else{\n                                if(--numberOfTries < 1){\n                                    clearInterval(interval);\n                                    reject();\n                                }\n                            }\n                        }, 100);\n                    },\n                    () => {reject()});\n        });\n    }\n}","\nexport class FileUtil{\n\n    static createFolderIfNotExists(folderPath: string){\n        const fs = require('fs');\n\n        if (!fs.existsSync(folderPath)){\n            fs.mkdirSync(folderPath, { recursive: true });\n        }\n    }\n\n    static getDirectoryFilesList(folderPath: string) : string[]{\n        const fs = require('fs');\n        const path = require('path');\n\n        let files:string[] = fs.readdirSync(folderPath);\n\n        return files;\n    }\n\n    static removeExtension(folderPath: string) : string[]{\n        const fs = require('fs');\n        const path = require('path');\n\n        let files:string[] = fs.readdirSync(folderPath);\n\n        for(let i = 0; i < files.length; i++){\n            files[i] = path.parse(files[i]).name;\n        }\n\n        return files;\n    }\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { VSHAuto } from './VSHAuto';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tlet showCommands = vscode.commands.registerCommand('vshauto.showCommands', () => {\n\t\tVSHAuto.showCommandsInPickUp(context);\n\t});\n\n\tlet editCommands = vscode.commands.registerCommand('vshauto.editCommands', () => {\n\t\tVSHAuto.showCommandsToEditInPickUp(context);\n\t});\n\n\tcontext.subscriptions.push(showCommands);\n\tcontext.subscriptions.push(editCommands);\n}\n\nexport function deactivate() {}\n"],"names":["TerminalUtil","EditorUtil","VSHAuto","static","context","SCRIPT_PATH","extensionPath","replace","createScriptFolderIfNotExists","FileUtil","createFolderIfNotExists","scriptNames","getDirectoryFilesList","scriptNameWithoutExt","removeExtension","vscode","window","showQuickPick","then","selection","selectedIndex","indexOf","selectedFilePath","fileContent","toString","eval","concat","async","newScriptFileName","showInputBox","title","toLowerCase","endsWith","newScriptFilePath","encoding","openFile","scriptPath","fs","existsSync","mkdirSync","templates","get","i","length","template","templatePath","fileName","writeFileSync","filePath","fileUri","Uri","parse","workspace","openTextDocument","doc","showTextDocument","selectedFileName","getSelectedFileName","activeTextEditor","document","getText","edit","b","delete","Range","Position","lineCount","getSelectedFileContent","insert","text","end","selectionStart","command","getActiveOrOpenNewTerminal","terminal","sendText","Promise","resolve","reject","activeTerminal","commands","executeCommand","numberOfTries","interval","setInterval","clearInterval","folderPath","recursive","readdirSync","path","files","name","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","showCommands","registerCommand","showCommandsInPickUp","editCommands","showCommandsToEditInPickUp","subscriptions","push"],"sourceRoot":""}