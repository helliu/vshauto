{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://vshauto/./src/VSHAuto.ts","webpack://vshauto/./src/templates/defaultTemplates.ts","webpack://vshauto/./src/util/EditorUtil.ts","webpack://vshauto/./src/util/TerminalUtil.ts","webpack://vshauto/./src/util/fileUtil.ts","webpack://vshauto/external commonjs \"vscode\"","webpack://vshauto/external node-commonjs \"fs\"","webpack://vshauto/external node-commonjs \"path\"","webpack://vshauto/webpack/bootstrap","webpack://vshauto/./src/extension.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { FileUtil } from './util/fileUtil';\nimport './util/TerminalUtil';\nimport _TerminalUtil from './util/TerminalUtil';\nimport _EditorUtil from './util/EditorUtil';\nimport DefaultTemplates from './templates/defaultTemplates'\n\n\n//make classes availe inside eval\nvar TerminalUtil = _TerminalUtil;\nvar EditorUtil = _EditorUtil;\n\nexport class VSHAuto{  \n\n    static showCommandsInPickUp(context: vscode.ExtensionContext){\n        const SCRIPT_PATH = context.extensionPath.replace(/\\\\/g, \"/\") + \"/scripts\";\n\n        VSHAuto.createScriptFolderIfNotExists(SCRIPT_PATH);\n\n        FileUtil.createFolderIfNotExists(SCRIPT_PATH);\n\n        let scriptNames: string[] = FileUtil.getDirectoryFilesList(SCRIPT_PATH);\n        let scriptNameWithoutExt: string[] = FileUtil.removeExtension(SCRIPT_PATH);\n\n        vscode.window.showQuickPick(scriptNameWithoutExt).then(selection => {\n            let selectedIndex:number = scriptNameWithoutExt.indexOf('' + selection);\n \n            VSHAuto.executeScriptByName(context, scriptNames[selectedIndex]);\n        });\n    }\n\n    static executeScriptByName(context: vscode.ExtensionContext, scriptName: string) {\n        const SCRIPT_PATH = context.extensionPath.replace(/\\\\/g, \"/\") + \"/scripts\";\n\n        let selectedFilePath:string = `${SCRIPT_PATH}/${scriptName}`;\n\n        let fileContent:string = require(\"fs\").readFileSync(selectedFilePath).toString();\n\n        eval(fileContent);\n    }\n\n    static showCommandsToEditInPickUp(context: vscode.ExtensionContext){\n        const SCRIPT_PATH = context.extensionPath.replace(/\\\\/g, \"/\") + \"/scripts\";\n\n        VSHAuto.createScriptFolderIfNotExists(SCRIPT_PATH);\n\n        FileUtil.createFolderIfNotExists(SCRIPT_PATH);\n\n        let scriptNames: string[] = FileUtil.getDirectoryFilesList(SCRIPT_PATH);\n        let scriptNameWithoutExt: string[] = FileUtil.removeExtension(SCRIPT_PATH);\n\n        scriptNameWithoutExt = [\"Create new Script...\"].concat(scriptNameWithoutExt);\n\n        vscode.window.showQuickPick(scriptNameWithoutExt).then(async selection => {\n            let selectedIndex:number = scriptNameWithoutExt.indexOf('' + selection);\n\n            if(selectedIndex == 0){\n                let newScriptFileName = await vscode.window.showInputBox({title: \"New script file name\"});\n\n                newScriptFileName = newScriptFileName.toLowerCase().endsWith(\".js\") ? newScriptFileName : newScriptFileName + \".js\";\n                \n                let newScriptFilePath = `${SCRIPT_PATH}/${newScriptFileName}`;\n\n                require(\"fs\").writeFileSync(newScriptFilePath, \"const vscode = require('vscode');\\n\\n\", {encoding: \"utf8\"});\n                EditorUtil.openFile(newScriptFilePath);\n            }else{\n                let selectedFilePath:string = `${SCRIPT_PATH}/${scriptNames[selectedIndex-1]}`;\n                EditorUtil.openFile(selectedFilePath);\n            }\n        });\n    }\n    \n\tstatic listAllScriptsInfo(context: vscode.ExtensionContext): any[] {\n        let commands = [];\n\t\tconst SCRIPT_PATH = context.extensionPath.replace(/\\\\/g, \"/\") + \"/scripts\";\n\n        VSHAuto.createScriptFolderIfNotExists(SCRIPT_PATH);\n\n        FileUtil.createFolderIfNotExists(SCRIPT_PATH);\n\n        let scriptNames: string[] = FileUtil.getDirectoryFilesList(SCRIPT_PATH);\n\n        for(let i = 0; i < scriptNames.length; i++){\n            const selectedFilePath:string = `${SCRIPT_PATH}/${scriptNames[i]}`;\n            const fileContent:string =  require(\"fs\").readFileSync(selectedFilePath).toString();\n            const scriptName = scriptNames[i];\n            const commandName:string = VSHAuto.extractCommandName(fileContent);\n\n            commands.push({commandName, scriptName});\n        }\n\n        return commands;\n\t}\n\n    private static extractCommandName(fileContent:string){\n        //matches '// command: '\n        const CMD_REGEX = /\\/\\/( )*?command( )*?:( )*?/;  \n        \n        let lines = fileContent.split('\\n');\n\n        if(lines.length == 0)\n           return null;\n\n        let firstScriptLine = fileContent.split('\\n')[0];\n\n        if(!CMD_REGEX.test(firstScriptLine))\n            return null;        \n\n        return firstScriptLine.replace(CMD_REGEX, '').replace(/ /g, '');\n    }\n\n    static createScriptFolderIfNotExists(scriptPath: string) {\n        const fs = require(\"fs\");\n        \n        if(!fs.existsSync(scriptPath)){\n            fs.mkdirSync(scriptPath);\n\n            let templates =  DefaultTemplates.get();\n\n            for(let i = 0; i < templates.length; i++){\n                const template = templates[i];\n                const templatePath = `${scriptPath}/${template.fileName}`;\n\n                fs.writeFileSync(templatePath, template.template, {encoding: \"utf8\"});\n            }\n        }\n    }\n}","\nexport default class DefaultTemplates{\n\n    static get(){\n        return [\n        {fileName: '01 - open scritps in vscode project.js', template:`// command: vshauto.open_scripts_new_instance\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nTerminalUtil.executeCommandInTerminal(\\`code '\\${SCRIPT_PATH}'\\`);`},\n    \n        {fileName: '02 - open scripts in this vscode instance.js', template:`// command: vshauto.open_scripts\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nlet workspaceFolders = vscode.workspace.workspaceFolders;\n\nvscode.workspace.updateWorkspaceFolders(workspaceFolders ? workspaceFolders.length : 0,\n    null,\n    {\n        uri: vscode.Uri.file(SCRIPT_PATH),\n        name: require('path').basename(SCRIPT_PATH)\n    });\n`},\n    \n        {fileName: '03 - edit file.js', template:`// command: vshauto.edit_file\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nlet fileContent = EditorUtil.getSelectedFileContent();\n\nlet changedFileContent = \\`this file content was changed the original content is >>>\\n \\${fileContent} \\n>>> end of original content\\`;\n\nEditorUtil.setSelectedFileContent(changedFileContent);`},\n    \n        {fileName: '04 - insert text at cursor position.js', template:`// command: vshauto.insert_text_at_cursor\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nEditorUtil.insertText(\"<INSERTED AT CURSOR>\");`},\n    \n        {fileName: '05 - edit selected text.js', template:`// command: vshauto.edit_selected_text\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nEditorUtil.insertInSelection(\"CHANGED\");`},\n    \n        {fileName: '06 - save current file.js', template:`// command: vshauto.save_current_file\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nvscode.commands.executeCommand('workbench.action.files.save');`},\n    \n        {fileName: '07 - messagebox example.js', template:`// command: vshauto.messagebox_example\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nvscode.window.showInformationMessage('HELLO!!!');`},\n    \n        {fileName: '08 - webview example.js', template:`// command: vshauto.webview_example\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nconst panel = vscode.window.createWebviewPanel(\n    'indentifierID', \n    'Window Title',\n    vscode.ViewColumn.One,\n    {}\n);\n\npanel.webview.html = \\`\n    <html>\n\n    <head>\n    </head>\n\n    <body>\n       <h1>My WebView</h1>\n    </body>\n\n    </html>\n\\`;`},\n    \n        {fileName: '09 - execute command in terminal.js', template:`// command: vshauto.execute_in_terminal\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nTerminalUtil.executeCommandInTerminal(\"ls\");`},\n    \n        {fileName: '10 - get paths.js', template:`// command: vshauto.get_paths\n// restart vscode is needed when command name is changed\n// to add shortcut go to File -> Preferences -> Keyboard Shortcuts\n\nconst vscode = require('vscode');\n\nlet filePath = EditorUtil.getSelectedFileName();\nlet fileFolderPath = EditorUtil.getSelectedFileFolder();\nlet workspacePath = vscode.workspace.workspaceFolders.length > 0 ? vscode.workspace.workspaceFolders[0].uri.fsPath : '';\n\nTerminalUtil.executeCommandInTerminal(\\`echo 'selected file: \\${filePath}'\\`);\nTerminalUtil.executeCommandInTerminal(\\`echo 'selected file folder: \\${fileFolderPath}'\\`);\nTerminalUtil.executeCommandInTerminal(\\`echo 'workspace folder: \\${workspacePath}'\\`);`},\n    ];\n    }\n\n}","import { Position, Range } from \"vscode\";\n\nconst vscode = require('vscode');\n\nexport default class EditorUtil{\n\n    static openFile(filePath: string){\n        var fileUri = vscode.Uri.parse(\"file:///\" + filePath);\n\n        vscode.workspace.openTextDocument(fileUri).then((doc: any) => {\n            vscode.window.showTextDocument(doc);\n        });\n    }\n\n    static getSelectedFileFolder(): string|null{\n        let selectedFileName = EditorUtil.getSelectedFileName();\n\n        if(selectedFileName == null)\n            return null;\n\n        return require('path').dirname(selectedFileName);\n    }\n\n    static getSelectedFileName(): string|null{\n        if(vscode.window.activeTextEditor == null)\n             return null;\n\n        return vscode.window.activeTextEditor.document.fileName;\n    }\n\n    static getSelectedFileContent(): string{\n        if(vscode.window.activeTextEditor == null)\n             return \"\";\n\n        return vscode.window.activeTextEditor.document.getText();\n    }\n\n    static setSelectedFileContent(fileContent: string){\n        if(vscode.window.activeTextEditor == null)\n             return;\n\n        vscode.window.activeTextEditor.edit(b => {\n            let line = 0;\n            let column = 0;\n            b.delete(new Range(new Position(0, 0), new Position(vscode.window.activeTextEditor.document.lineCount-1, EditorUtil.getSelectedFileContent().length)));\n            b.insert(new vscode.Position(line, column), fileContent);\n        });\n    }\n\n    static insertText(text: string){\n        if(vscode.window.activeTextEditor == null)\n             return;\n\n        vscode.window.activeTextEditor.edit(b => {            \n            b.insert(vscode.window.activeTextEditor.selection.end, text);\n        });\n    }\n\n    static insertInSelection(text: string){\n        if(vscode.window.activeTextEditor == null)\n             return;\n\n        vscode.window.activeTextEditor.edit(b => { \n            let selectionStart = vscode.window.activeTextEditor.selection.end;\n               \n            b.delete(vscode.window.activeTextEditor.selection);\n            b.insert(selectionStart, text);\n        });\n    }\n}","import * as vscode from 'vscode';\n\nexport default class TerminalUtil{\n\n    static executeCommandInTerminal(command:string){\n        TerminalUtil.getActiveOrOpenNewTerminal().then((terminal) => {\n            terminal.sendText(command);\n        });\n    }\n\n    private static getActiveOrOpenNewTerminal(): Promise<vscode.Terminal>{\n        return new Promise((resolve, reject) => {\n            if(vscode.window.activeTerminal)\n                resolve(vscode.window.activeTerminal);\n                \n                vscode.commands.executeCommand(\"workbench.action.terminal.toggleTerminal\").then(\n                    () => {\n                        var numberOfTries = 100;\n    \n                        var interval = setInterval(function(){\n                            if(vscode.window.activeTerminal)\n                                resolve(vscode.window.activeTerminal);\n                            else{\n                                if(--numberOfTries < 1){\n                                    clearInterval(interval);\n                                    reject();\n                                }\n                            }\n                        }, 100);\n                    },\n                    () => {reject()});\n        });\n    }\n}","\nexport class FileUtil{\n\n    static createFolderIfNotExists(folderPath: string){\n        const fs = require('fs');\n\n        if (!fs.existsSync(folderPath)){\n            fs.mkdirSync(folderPath, { recursive: true });\n        }\n    }\n\n    static getDirectoryFilesList(folderPath: string) : string[]{\n        const fs = require('fs');\n        const path = require('path');\n\n        let files:string[] = fs.readdirSync(folderPath);\n\n        return files;\n    }\n\n    static removeExtension(folderPath: string) : string[]{\n        const fs = require('fs');\n        const path = require('path');\n\n        let files:string[] = fs.readdirSync(folderPath);\n\n        for(let i = 0; i < files.length; i++){\n            files[i] = path.parse(files[i]).name;\n        }\n\n        return files;\n    }\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { VSHAuto } from './VSHAuto';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tlet showCommands = vscode.commands.registerCommand('vshauto.showCommands', () => {\n\t\tVSHAuto.showCommandsInPickUp(context);\n\t});\n\n\tlet editCommands = vscode.commands.registerCommand('vshauto.editCommands', () => {\n\t\tVSHAuto.showCommandsToEditInPickUp(context);\n\t});\n\n\tcontext.subscriptions.push(showCommands);\n\tcontext.subscriptions.push(editCommands);\n\n\tregisterScriptCommands(context);\n}\n\nfunction registerScriptCommands(context: vscode.ExtensionContext){\n\tlet scriptInfos = VSHAuto.listAllScriptsInfo(context);\n\t\n\tfor(let i = 0; i < scriptInfos.length; i++){\n\t\tif(scriptInfos[i].commandName){\n\t\t\tlet scriptCommand = vscode.commands.registerCommand(scriptInfos[i].commandName, () => VSHAuto.executeScriptByName(context, scriptInfos[i].scriptName));\n \n\t\t\tcontext.subscriptions.push(scriptCommand);\n\t\t}\n\t}\n}\n\nexport function deactivate() {}\n"],"names":["TerminalUtil","EditorUtil","VSHAuto","static","context","SCRIPT_PATH","extensionPath","replace","createScriptFolderIfNotExists","FileUtil","createFolderIfNotExists","scriptNames","getDirectoryFilesList","scriptNameWithoutExt","removeExtension","vscode","window","showQuickPick","then","selection","selectedIndex","indexOf","executeScriptByName","scriptName","selectedFilePath","fileContent","toString","eval","concat","async","newScriptFileName","showInputBox","title","toLowerCase","endsWith","newScriptFilePath","encoding","openFile","commands","i","length","commandName","extractCommandName","push","CMD_REGEX","split","firstScriptLine","test","scriptPath","fs","existsSync","mkdirSync","templates","get","template","templatePath","fileName","writeFileSync","filePath","fileUri","Uri","parse","workspace","openTextDocument","doc","showTextDocument","selectedFileName","getSelectedFileName","activeTextEditor","document","getText","edit","b","delete","Range","Position","lineCount","getSelectedFileContent","insert","text","end","selectionStart","command","getActiveOrOpenNewTerminal","terminal","sendText","Promise","resolve","reject","activeTerminal","executeCommand","numberOfTries","interval","setInterval","clearInterval","folderPath","recursive","readdirSync","path","files","name","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","showCommands","registerCommand","showCommandsInPickUp","editCommands","showCommandsToEditInPickUp","subscriptions","scriptInfos","listAllScriptsInfo","scriptCommand","registerScriptCommands"],"sourceRoot":""}