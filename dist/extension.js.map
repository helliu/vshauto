{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://vshauto/./src/VSHAuto.ts","webpack://vshauto/./src/templates/defaultTemplates.ts","webpack://vshauto/./src/util/EditorUtil.ts","webpack://vshauto/./src/util/TerminalUtil.ts","webpack://vshauto/./src/util/fileUtil.ts","webpack://vshauto/external commonjs \"vscode\"","webpack://vshauto/external node-commonjs \"fs\"","webpack://vshauto/external node-commonjs \"path\"","webpack://vshauto/webpack/bootstrap","webpack://vshauto/./src/extension.ts"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport { FileUtil } from './util/fileUtil';\r\nimport './util/TerminalUtil';\r\nimport _TerminalUtil from './util/TerminalUtil';\r\nimport _EditorUtil from './util/EditorUtil';\r\nimport DefaultTemplates from './templates/defaultTemplates'\r\n\r\n\r\n//make classes availe inside eval\r\nvar TerminalUtil = _TerminalUtil;\r\nvar EditorUtil = _EditorUtil;\r\n\r\nexport class VSHAuto{\r\n    \r\n\r\n    static showCommandsInPickUp(context: vscode.ExtensionContext){\r\n        const SCRIPT_PATH = context.extensionPath.replace(/\\\\/g, \"/\") + \"/scripts\";\r\n\r\n        VSHAuto.createScriptFolderIfNotExists(SCRIPT_PATH);\r\n\r\n        FileUtil.createFolderIfNotExists(SCRIPT_PATH);\r\n\r\n        let scriptNames: string[] = FileUtil.getDirectoryFilesList(SCRIPT_PATH);\r\n        let scriptNameWithoutExt: string[] = FileUtil.removeExtension(SCRIPT_PATH);\r\n\r\n        vscode.window.showQuickPick(scriptNameWithoutExt).then(selection => {\r\n            let selectedIndex:number = scriptNameWithoutExt.indexOf('' + selection);\r\n \r\n            let selectedFilePath:string = `${SCRIPT_PATH}/${scriptNames[selectedIndex]}`;\r\n\r\n            let fileContent:string = require(\"fs\").readFileSync(selectedFilePath).toString();\r\n\r\n            eval(fileContent);\r\n        });\r\n    }\r\n    static createScriptFolderIfNotExists(scriptPath: string) {\r\n        const fs = require(\"fs\");\r\n        \r\n        if(!fs.existsSync(scriptPath)){\r\n            fs.mkdirSync(scriptPath);\r\n\r\n            let templates =  DefaultTemplates.get();\r\n\r\n            for(let i = 0; i < templates.length; i++){\r\n                const template = templates[i];\r\n                const templatePath = `${scriptPath}/${template.fileName}`;\r\n\r\n                fs.writeFileSync(templatePath, template.template, {encoding: \"utf8\"});\r\n            }\r\n        }\r\n    }\r\n}","\r\nexport default class DefaultTemplates{\r\n\r\n    static get(){\r\n        return [\r\n        {fileName: '01 - open scritps in vscode project.js', template:`const vscode = require('vscode');\r\n\r\n        TerminalUtil.executeCommandInTerminal(\\`code '\\${SCRIPT_PATH}'\\`);`},\r\n    \r\n        {fileName: '02 - open scripts in this vscode instance.js', template:`const vscode = require('vscode');\r\n\r\n        let workspaceFolders = vscode.workspace.workspaceFolders;\r\n        \r\n        vscode.workspace.updateWorkspaceFolders(workspaceFolders ? workspaceFolders.length : 0,\r\n            null,\r\n            {\r\n                uri: vscode.Uri.file(SCRIPT_PATH),\r\n                name: require('path').basename(SCRIPT_PATH)\r\n            });\r\n        `},\r\n    \r\n        {fileName: '03 - edit file.js', template:`const vscode = require('vscode');\r\n\r\n        let fileContent = EditorUtil.getSelectedFileContent();\r\n        \r\n        let changedFileContent = \\`this file content was changed the original content is >>>\\n \\${fileContent} \\n>>> end of original content\\`;\r\n        \r\n        EditorUtil.setSelectedFileContent(changedFileContent);`},\r\n    \r\n        {fileName: '04 - insert text at cursor position.js', template:`const vscode = require('vscode');\r\n\r\n        EditorUtil.insertText(\"<INSERTED AT CURSOR>\");`},\r\n    \r\n        {fileName: '05 - edit selected text.js', template:`const vscode = require('vscode');\r\n\r\n        EditorUtil.insertInSelection(\"CHANGED\");`},\r\n    \r\n        {fileName: '06 - save current file.js', template:`const vscode = require('vscode');\r\n\r\n        vscode.commands.executeCommand('workbench.action.files.save');`},\r\n    \r\n        {fileName: '07 - messagebox example.js', template:`const vscode = require('vscode');\r\n\r\n        vscode.window.showInformationMessage('HELLO!!!');`},\r\n    \r\n        {fileName: '08 - webview example.js', template:`const vscode = require('vscode');\r\n\r\n        const panel = vscode.window.createWebviewPanel(\r\n            'indentifierID', \r\n            'Window Title',\r\n            vscode.ViewColumn.One,\r\n            {}\r\n        );\r\n        \r\n        panel.webview.html = \\`\r\n            <html>\r\n        \r\n            <head>\r\n            </head>\r\n        \r\n            <body>\r\n               <h1>My WebView</h1>\r\n            </body>\r\n        \r\n            </html>\r\n        \\`;`},\r\n    \r\n        {fileName: '09 - execute command in terminal.js', template:`const vscode = require('vscode');\r\n\r\n        TerminalUtil.executeCommandInTerminal(\"ls\");`},\r\n    \r\n        {fileName: '10 - get paths.js', template:`const vscode = require('vscode');\r\n\r\n        let filePath = EditorUtil.getSelectedFileName();\r\n        let fileFolderPath = EditorUtil.getSelectedFileFolder();\r\n        let workspacePath = vscode.workspace.workspaceFolders.length > 0 ? vscode.workspace.workspaceFolders[0].uri.fsPath : '';\r\n        \r\n        TerminalUtil.executeCommandInTerminal(\\`echo 'selected file: \\${filePath}'\\`);\r\n        TerminalUtil.executeCommandInTerminal(\\`echo 'selected file folder: \\${fileFolderPath}'\\`);\r\n        TerminalUtil.executeCommandInTerminal(\\`echo 'workspace folder: \\${workspacePath}'\\`);`},\r\n    ];\r\n    }\r\n\r\n}","import { Position, Range } from \"vscode\";\r\n\r\nconst vscode = require('vscode');\r\n\r\nexport default class EditorUtil{\r\n\r\n    static openFile(filePath: string){\r\n        var fileUri = vscode.Uri.parse(\"file:///\" + filePath);\r\n\r\n        vscode.workspace.openTextDocument(fileUri).then((doc: any) => {\r\n            vscode.window.showTextDocument(doc);\r\n        });\r\n    }\r\n\r\n    static getSelectedFileFolder(): string|null{\r\n        let selectedFileName = EditorUtil.getSelectedFileName();\r\n\r\n        if(selectedFileName == null)\r\n            return null;\r\n\r\n        return require('path').dirname(selectedFileName);\r\n    }\r\n\r\n    static getSelectedFileName(): string|null{\r\n        if(vscode.window.activeTextEditor == null)\r\n             return null;\r\n\r\n        return vscode.window.activeTextEditor.document.fileName;\r\n    }\r\n\r\n    static getSelectedFileContent(): string{\r\n        if(vscode.window.activeTextEditor == null)\r\n             return \"\";\r\n\r\n        return vscode.window.activeTextEditor.document.getText();\r\n    }\r\n\r\n    static setSelectedFileContent(fileContent: string){\r\n        if(vscode.window.activeTextEditor == null)\r\n             return;\r\n\r\n        vscode.window.activeTextEditor.edit(b => {\r\n            let line = 0;\r\n            let column = 0;\r\n            b.delete(new Range(new Position(0, 0), new Position(vscode.window.activeTextEditor.document.lineCount-1, EditorUtil.getSelectedFileContent().length)));\r\n            b.insert(new vscode.Position(line, column), fileContent);\r\n        });\r\n    }\r\n\r\n    static insertText(text: string){\r\n        if(vscode.window.activeTextEditor == null)\r\n             return;\r\n\r\n        vscode.window.activeTextEditor.edit(b => {            \r\n            b.insert(vscode.window.activeTextEditor.selection.end, text);\r\n        });\r\n    }\r\n\r\n    static insertInSelection(text: string){\r\n        if(vscode.window.activeTextEditor == null)\r\n             return;\r\n\r\n        vscode.window.activeTextEditor.edit(b => { \r\n            let selectionStart = vscode.window.activeTextEditor.selection.end;\r\n               \r\n            b.delete(vscode.window.activeTextEditor.selection);\r\n            b.insert(selectionStart, text);\r\n        });\r\n    }\r\n}","import * as vscode from 'vscode';\n\nexport default class TerminalUtil{\n\n    static executeCommandInTerminal(command:string){\n        TerminalUtil.getActiveOrOpenNewTerminal().then((terminal) => {\n            terminal.sendText(command);\n        });\n    }\n\n    private static getActiveOrOpenNewTerminal(): Promise<vscode.Terminal>{\n        return new Promise((resolve, reject) => {\n            if(vscode.window.activeTerminal)\n                resolve(vscode.window.activeTerminal);\n                \n                vscode.commands.executeCommand(\"workbench.action.terminal.toggleTerminal\").then(\n                    () => {\n                        var numberOfTries = 100;\n    \n                        var interval = setInterval(function(){\n                            if(vscode.window.activeTerminal)\n                                resolve(vscode.window.activeTerminal);\n                            else{\n                                if(--numberOfTries < 1){\n                                    clearInterval(interval);\n                                    reject();\n                                }\n                            }\n                        }, 100);\n                    },\n                    () => {reject()});\n        });\n    }\n}","\r\nexport class FileUtil{\r\n\r\n    static createFolderIfNotExists(folderPath: string){\r\n        const fs = require('fs');\r\n\r\n        if (!fs.existsSync(folderPath)){\r\n            fs.mkdirSync(folderPath, { recursive: true });\r\n        }\r\n    }\r\n\r\n    static getDirectoryFilesList(folderPath: string) : string[]{\r\n        const fs = require('fs');\r\n        const path = require('path');\r\n\r\n        let files:string[] = fs.readdirSync(folderPath);\r\n\r\n        return files;\r\n    }\r\n\r\n    static removeExtension(folderPath: string) : string[]{\r\n        const fs = require('fs');\r\n        const path = require('path');\r\n\r\n        let files:string[] = fs.readdirSync(folderPath);\r\n\r\n        for(let i = 0; i < files.length; i++){\r\n            files[i] = path.parse(files[i]).name;\r\n        }\r\n\r\n        return files;\r\n    }\r\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { VSHAuto } from './VSHAuto';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tlet disposable = vscode.commands.registerCommand('vshauto.showCommands', () => {\n\t\tVSHAuto.showCommandsInPickUp(context);\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n"],"names":["TerminalUtil","EditorUtil","VSHAuto","static","context","SCRIPT_PATH","extensionPath","replace","createScriptFolderIfNotExists","FileUtil","createFolderIfNotExists","scriptNames","getDirectoryFilesList","scriptNameWithoutExt","removeExtension","vscode","window","showQuickPick","then","selection","selectedIndex","indexOf","selectedFilePath","fileContent","toString","eval","scriptPath","fs","existsSync","mkdirSync","templates","get","i","length","template","templatePath","fileName","writeFileSync","encoding","filePath","fileUri","Uri","parse","workspace","openTextDocument","doc","showTextDocument","selectedFileName","getSelectedFileName","activeTextEditor","document","getText","edit","b","delete","Range","Position","lineCount","getSelectedFileContent","insert","text","end","selectionStart","command","getActiveOrOpenNewTerminal","terminal","sendText","Promise","resolve","reject","activeTerminal","commands","executeCommand","numberOfTries","interval","setInterval","clearInterval","folderPath","recursive","readdirSync","path","files","name","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","disposable","registerCommand","showCommandsInPickUp","subscriptions","push"],"sourceRoot":""}